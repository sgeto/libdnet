I may eventually add top level scripts for for easier building from Github.
For now, here's the drill:


*BSD, MacOS X, Linux
--------------------

./configure && make

Solaris, IRIX, BSD/OS, HP-UX, Tru64
-----------------------------------

For firewall support, install Darren Reed's IP Filter package:

	http://coombs.anu.edu.au/~avalon/

For tunnel support on Solaris, install the Universal TUN/TAP Driver:

	http://vtun.sourceforge.net/tun/

Unixware, AIX
-------------

These ports are incomplete. If anyone can set me up with legitimate
root access to these platforms, it would be most appreciated. :-)

Windows
---------------

For raw Ethernet sending, install the WinPcap driver and DLLs from http://www.winpcap.org/install/default.htm. 

It is assumed that the WinPcap Developer's package aka WpdPack (available at http://www.winpcap.org/devel.htm) and libdnet have the same path. Please adjust accordingly if not. During configure, the --with-wpdpack=DIR option is mandatory and needs to point to the extracted WpdPack folder, although libraries and header files are (for some reason) also required to be present in your compilers /lib and /include directories.

# For tunnel interface support, install the OpenVPN "TAP-Win32 Virtual
# Ethernet Adapter" component (their Windows installer will let you
# install it alone):
#
#	http://openvpn.sourceforge.net/

For firewall support, install HSC's PktFilter service:

	http://www.hsc.fr/ressources/outils/pktfilter/index.html.en

MinGW:

When building from Github make sure to run ./autogen.sh to generate the configure shell script.

Cross compiling using WSL:

32bit:
./configure --host=i686-w64-mingw32 --with-wpdpack=../WpdPack
64bit:
./configure --host=x86_64-w64-mingw32 --with-wpdpack=../WpdPack


Compiling natively (under MSYS2):

Build steps should be the same as when cross compiling, except that the --host= option can be omitted.

Compiling natively library (under MSVC):

No idea. Coming soon. Try these old instructions for now:

To build a Microsoft Visual C++ native library and Python module
(again, under Cygwin+MinGW):

	./configure
	cd python && C:/Python23/python.exe setup.py build
	cd ../src && lib /out:dnet.lib *.obj